package org.example;

import uk.co.caprica.vlcj.player.base.MediaPlayer;
import uk.co.caprica.vlcj.player.base.MediaPlayerEventAdapter;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.concurrent.TimeUnit;

public class VideoControlPanel extends JPanel {
    private final MediaPlayer mediaPlayer;
    private final JButton playPauseButton;
    private final JButton stopButton;
    private final JSlider progressBar;
    private final JSlider volumeSlider;
    private final JLabel currentTimeLabel;
    private final JLabel totalTimeLabel;
    private final JLabel volumeLabel;
    private final Timer updateTimer;
    private boolean isUserInteracting = false;
    private final ImageIcon playIcon;
    private final ImageIcon pauseIcon;
    private final ImageIcon volumeHighIcon;
    private final ImageIcon volumeMediumIcon;
    private final ImageIcon volumeMuteIcon;
    private boolean isPlaying = false;
    private final JButton repeatButton;
    private final ImageIcon repeatOnIcon;
    private final ImageIcon repeatOffIcon;
    private boolean isRepeatEnabled = false;
    private static final long SEEK_TIME = 5000; // 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–µ—Ä–µ–º–æ—Ç–∫–∏
    private boolean isMediaLoaded = false; // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞

    public VideoControlPanel(MediaPlayer mediaPlayer) {
        this.mediaPlayer = mediaPlayer;

        // –î–µ–ª–∞–µ–º –ø–∞–Ω–µ–ª—å —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º–æ–π
        setFocusable(true);

        setLayout(new BorderLayout(1, 1));
        setBorder(BorderFactory.createEmptyBorder(1, 1, 1, 1));

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∫–æ–Ω–∫–∏
        playIcon = loadIcon("/icons/play.png", "‚ñ∂");
        pauseIcon = loadIcon("/icons/pause.png", "‚è∏");
        ImageIcon stopIcon = loadIcon("/icons/stop.png", "‚èπ");
        volumeHighIcon = loadIcon("/icons/volume-high.png", "üîä");
        volumeMediumIcon = loadIcon("/icons/volume-medium.png", "üîâ");
        volumeMuteIcon = loadIcon("/icons/volume-mute.png", "üîà");
        repeatOnIcon = loadIcon("/icons/repeat-on.png", "üîÅ");
        repeatOffIcon = loadIcon("/icons/repeat-off.png", "‚Ü©");

        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–≤—Ç–æ—Ä–∞
        repeatButton = createButton(repeatOffIcon, "–ü–æ–≤—Ç–æ—Ä –≤—ã–∫–ª—é—á–µ–Ω");

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        playPauseButton = createButton(playIcon, "–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏/–ü–∞—É–∑–∞ (–ü—Ä–æ–±–µ–ª)");
        stopButton = createButton(stopIcon, "–°—Ç–æ–ø");
        volumeLabel = new JLabel();
        updateVolumeIcon(100);

        progressBar = new JSlider(0, 100, 0);
        progressBar.setPreferredSize(new Dimension(0, 20));
        progressBar.setToolTipText("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–µ–ª–∫–∏ ‚Üê –∏ ‚Üí –¥–ª—è –ø–µ—Ä–µ–º–æ—Ç–∫–∏");

        volumeSlider = new JSlider(0, 100, 100);
        volumeSlider.setPreferredSize(new Dimension(100, 20));

        currentTimeLabel = new JLabel("00:00:00");
        totalTimeLabel = new JLabel("00:00:00");

        setupLayout();
        setupListeners();
        setControlsEnabled(false);

        updateTimer = new Timer(1000, e -> updateProgress());
        updateTimer.start();

        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
        SwingUtilities.invokeLater(this::requestFocusInWindow);
    }

    /**
     * –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–¥–∏–∞.
     */
    public void onMediaLoaded() {
        SwingUtilities.invokeLater(() -> {
            setControlsEnabled(true);
            updatePlayPauseButton(true); // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∏–Ω–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
        });
    }

    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
     * @param enabled true –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è, false –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
     */
    private void setControlsEnabled(boolean enabled) {
        playPauseButton.setEnabled(enabled);
        stopButton.setEnabled(enabled);
        repeatButton.setEnabled(enabled);
        progressBar.setEnabled(enabled);
        volumeSlider.setEnabled(enabled);
        isMediaLoaded = enabled;

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥
        if (!enabled) {
            currentTimeLabel.setText("00:00:00");
            totalTimeLabel.setText("00:00:00");
            progressBar.setValue(0);
            isPlaying = false;
            updatePlayPauseButton(false);
        }
    }

    private ImageIcon loadIcon(String path, String fallbackText) {
        try {
            java.net.URL iconUrl = getClass().getResource(path);
            if (iconUrl != null) {
                return new ImageIcon(iconUrl);
            }
        } catch (Exception e) {
            System.err.println("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∫–æ–Ω–∫–∏ " + path + ": " + e.getMessage());
        }
        return null;
    }

    private JButton createButton(ImageIcon icon, String tooltip) {
        JButton button = new JButton();
        if (icon != null) {
            button.setIcon(icon);
        } else {
            // –ï—Å–ª–∏ –∏–∫–æ–Ω–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç
            button.setText(tooltip.substring(0, 1));
            button.setFont(new Font("Arial", Font.PLAIN, 16));
        }
        button.setToolTipText(tooltip);
        button.setFocusPainted(false);
        button.setBorderPainted(false);
        button.setContentAreaFilled(false);
        button.setPreferredSize(new Dimension(40, 40));
        return button;
    }

    private void setupLayout() {
        // –ü–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 1, 0));
        buttonPanel.add(playPauseButton);
        buttonPanel.add(stopButton);
        buttonPanel.add(repeatButton);

        // –ü–∞–Ω–µ–ª—å –≤—Ä–µ–º–µ–Ω–∏
        JPanel timePanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 1, 0));
        timePanel.add(currentTimeLabel);
        timePanel.add(new JLabel("/"));
        timePanel.add(totalTimeLabel);

        // –ü–∞–Ω–µ–ª—å –≥—Ä–æ–º–∫–æ—Å—Ç–∏
        JPanel volumePanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 1, 0));
        volumePanel.add(volumeLabel);
        volumePanel.add(volumeSlider);

        // –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        JPanel topPanel = new JPanel(new BorderLayout());
        topPanel.add(buttonPanel, BorderLayout.WEST);
        topPanel.add(timePanel, BorderLayout.CENTER);
        topPanel.add(volumePanel, BorderLayout.EAST);

        add(topPanel, BorderLayout.NORTH);
        add(progressBar, BorderLayout.CENTER);
    }

    private void setupListeners() {
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏—à
        addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                switch (e.getKeyCode()) {
                    case KeyEvent.VK_SPACE:
                        togglePlayPause();
                        e.consume();
                        break;
                    case KeyEvent.VK_LEFT:
                        seekBackward();
                        e.consume();
                        break;
                    case KeyEvent.VK_RIGHT:
                        seekForward();
                        e.consume();
                        break;
                }
            }
        });

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ–≤—Ç–æ—Ä–∞
        repeatButton.addActionListener(e -> toggleRepeat());


        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å —Ñ–æ–∫—É—Å–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ñ–æ–∫—É—Å–∞ –Ω–∞ –ø–∞–Ω–µ–ª—å
        addFocusListener(new FocusAdapter() {
            @Override
            public void focusLost(FocusEvent e) {
                // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –æ–±—Ä–∞—Ç–Ω–æ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
                SwingUtilities.invokeLater(() -> requestFocusInWindow());
            }
        });

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –º—ã—à–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ñ–æ–∫—É—Å–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ
        addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                requestFocusInWindow();
            }
        });

        // –ö–Ω–æ–ø–∫–∞ Play/Pause
        playPauseButton.addActionListener(e -> {
            togglePlayPause();
            requestFocusInWindow(); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–æ–∫—É—Å –ø–∞–Ω–µ–ª–∏ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
        });

        // –ö–Ω–æ–ø–∫–∞ Stop
        stopButton.addActionListener(e -> {
            mediaPlayer.controls().stop();
            progressBar.setValue(0);
            currentTimeLabel.setText("00:00:00");
            updatePlayPauseButton(false);
            requestFocusInWindow();
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å —Å–ª–∞–π–¥–µ—Ä–∞ –≥—Ä–æ–º–∫–æ—Å—Ç–∏
        volumeSlider.addChangeListener(e -> {
            int volume = volumeSlider.getValue();
            if (!volumeSlider.getValueIsAdjusting()) {
                mediaPlayer.audio().setVolume(volume);
            }
            updateVolumeIcon(volume);
        });

        // –°–ª–∞–π–¥–µ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        progressBar.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                isUserInteracting = true;
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                seekToPosition(e);
                isUserInteracting = false;
            }
        });

        progressBar.addMouseMotionListener(new MouseAdapter() {
            @Override
            public void mouseDragged(MouseEvent e) {
                seekToPosition(e);
            }
        });

        // –°–ª–∞–π–¥–µ—Ä –≥—Ä–æ–º–∫–æ—Å—Ç–∏
        volumeSlider.addChangeListener(e -> {
            if (!volumeSlider.getValueIsAdjusting()) {
                mediaPlayer.audio().setVolume(volumeSlider.getValue());
            }
        });


        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å —Å–æ–±—ã—Ç–∏–π –ø–ª–µ–µ—Ä–∞
        mediaPlayer.events().addMediaPlayerEventListener(new MediaPlayerEventAdapter() {
            @Override
            public void playing(MediaPlayer mediaPlayer) {
                SwingUtilities.invokeLater(() -> {
                    updatePlayPauseButton(true);
                    if (!isMediaLoaded) {
                        setControlsEnabled(true);
                    }
                });
            }

            @Override
            public void paused(MediaPlayer mediaPlayer) {
                SwingUtilities.invokeLater(() -> updatePlayPauseButton(false));
            }

            @Override
            public void stopped(MediaPlayer mediaPlayer) {
                SwingUtilities.invokeLater(() -> {
                    updatePlayPauseButton(false);
                    if (!mediaPlayer.media().isValid()) {
                        setControlsEnabled(false);
                    }
                });
            }

            @Override
            public void finished(MediaPlayer mediaPlayer) {
                SwingUtilities.invokeLater(() -> {
                    if (isRepeatEnabled) {
                        mediaPlayer.controls().setPosition(0);
                        mediaPlayer.controls().play();
                    } else {
                        updatePlayPauseButton(false);
                    }
                });
            }
            @Override
            public void error(MediaPlayer mediaPlayer) {
                SwingUtilities.invokeLater(() -> setControlsEnabled(false));
            }
        });
    }

    private void toggleRepeat() {
        isRepeatEnabled = !isRepeatEnabled;
        updateRepeatButton();
        requestFocusInWindow(); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–æ–∫—É—Å –ø–∞–Ω–µ–ª–∏
    }

    private void updateRepeatButton() {
        if (isRepeatEnabled) {
            repeatButton.setIcon(repeatOnIcon != null ? repeatOnIcon : new JLabel("üîÅ").getIcon());
            repeatButton.setToolTipText("–ü–æ–≤—Ç–æ—Ä –≤–∫–ª—é—á–µ–Ω");
        } else {
            repeatButton.setIcon(repeatOffIcon != null ? repeatOffIcon : new JLabel("‚Ü©").getIcon());
            repeatButton.setToolTipText("–ü–æ–≤—Ç–æ—Ä –≤—ã–∫–ª—é—á–µ–Ω");
        }
    }

    private void seekForward() {
        if (mediaPlayer.status().isPlayable()) {
            long currentTime = mediaPlayer.status().time();
            long newTime = currentTime + SEEK_TIME;
            long duration = mediaPlayer.status().length();

            if (newTime < duration) {
                mediaPlayer.controls().setTime(newTime);
                updateProgressDisplay(newTime, duration);
            }
        }
    }

    private void updateProgressDisplay(long current, long total) {
        if (total > 0) {
            int percentage = (int) ((current * 100.0) / total);
            progressBar.setValue(percentage);
            currentTimeLabel.setText(formatTime(current));
        }
    }

    private void seekBackward() {
        if (mediaPlayer.status().isPlayable()) {
            long currentTime = mediaPlayer.status().time();
            long newTime = currentTime - SEEK_TIME;

            if (newTime < 0) {
                newTime = 0;
            }

            mediaPlayer.controls().setTime(newTime);
            updateProgressDisplay(newTime, mediaPlayer.status().length());
        }
    }

    private void togglePlayPause() {
        if (isPlaying) {
            mediaPlayer.controls().pause();
        } else {
            mediaPlayer.controls().play();
        }
        isPlaying = !isPlaying;
        updatePlayPauseButton(isPlaying);
    }

    private void updatePlayPauseButton(boolean playing) {
        isPlaying = playing;
        playPauseButton.setIcon(playing ? pauseIcon : playIcon);
        playPauseButton.setToolTipText(playing ? "–ü–∞—É–∑–∞" : "–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏");
    }

    private void seekToPosition(MouseEvent e) {
        int mouseX = e.getX();
        int width = progressBar.getWidth();
        float percentage = (float) mouseX / width;
        long duration = mediaPlayer.status().length();
        long newPosition = (long) (duration * percentage);
        mediaPlayer.controls().setTime(newPosition);
    }

    private void updateProgress() {
        if (!isUserInteracting && mediaPlayer.status().isPlaying()) {
            long current = mediaPlayer.status().time();
            long total = mediaPlayer.status().length();

            if (total > 0) {
                int percentage = (int) ((current * 100.0) / total);
                progressBar.setValue(percentage);

                currentTimeLabel.setText(formatTime(current));
                totalTimeLabel.setText(formatTime(total));
            }
        }
    }

    private void updateVolumeIcon(int volume) {
        Icon icon;
        if (volume == 0) {
            icon = volumeMuteIcon != null ? volumeMuteIcon : new JLabel("üîà").getIcon();
        } else if (volume < 50) {
            icon = volumeMediumIcon != null ? volumeMediumIcon : new JLabel("üîâ").getIcon();
        } else {
            icon = volumeHighIcon != null ? volumeHighIcon : new JLabel("üîä").getIcon();
        }

        if (icon != null) {
            volumeLabel.setIcon(icon);
        } else {
            volumeLabel.setText(volume == 0 ? "üîà" : volume < 50 ? "üîâ" : "üîä");
            volumeLabel.setFont(new Font("Arial", Font.PLAIN, 16));
        }
    }

    private String formatTime(long millis) {
        long hours = TimeUnit.MILLISECONDS.toHours(millis);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(millis) % 60;
        long seconds = TimeUnit.MILLISECONDS.toSeconds(millis) % 60;
        return String.format("%02d:%02d:%02d", hours, minutes, seconds);
    }

    @Override
    public void addNotify() {
        super.addNotify();
        if (isMediaLoaded) {
            SwingUtilities.invokeLater(this::requestFocusInWindow);
        }
    }

    @Override
    public String getToolTipText(MouseEvent e) {
        Point p = e.getPoint();
        if (progressBar.getBounds().contains(p)) {
            return "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–µ–ª–∫–∏ ‚Üê –∏ ‚Üí –¥–ª—è –ø–µ—Ä–µ–º–æ—Ç–∫–∏ –≤–∏–¥–µ–æ –Ω–∞ 5 —Å–µ–∫—É–Ω–¥";
        }
        return super.getToolTipText(e);
    }

    public void release() {
        updateTimer.stop();
    }
}